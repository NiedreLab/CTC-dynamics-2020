%% Create simulations that follow Poisson statistics
% Inputs
recreate_flag = 1; % Set to 1 to recreate simulations
                   % Set to 0 to load previous simulations
% If processing previously generated simulations, mean and variance of the
% possible "blood samples" will be recalculated
num_simulations = 54; % Number of simulations
scan_length_minutes = 35;% Length of the simulated scan (in minutes)
save_data_flag =  0; % Set to 1 to save data, 0 to not save data

%%
% Sampling frequency (used for counting number of possible blood samples)
fs = 2000;
% Percents of the blood volume to use
percent_bloodVols = [1 5 10 20];
% Convert to time (of DiFC scan) assuming 50 uL per minute and 2000uL total blood volume
interval_lengths = percent_bloodVols .* 120 ./ 5;

%%
if recreate_flag == 1
    % Use MM_35min detection rates for simulations
    load('MM_35min_data.mat', 'avg_CTCs_per_min');
    % avg_rates are the input detection rates used to generate simulations
    avg_rates = [avg_CTCs_per_min' avg_CTCs_per_min' avg_CTCs_per_min'];
    % Create structures that will hold all detection times for each
    % simulations, number of detections and input detection rates (input
    % into exponential number generator)
    detections = NaN(2000, num_simulations);
    num_detections = zeros(1, num_simulations);
    input_avg = zeros(1,num_simulations);
else
    % If not recreating simulations, just load existing simulated
    % detections
    load('Simulations_Poisson_detections.mat', 'detections', 'num_detections');
    num_simulations = size(detections, 2);
end

avg_CTCs_per_interv = zeros(length(interval_lengths), num_simulations);
interval_variance = avg_CTCs_per_interv;

for i = 1:num_simulations
    fprintf('Simulation %d of %d\n', i, num_simulations);
    if recreate_flag == 1
        avg = avg_rates(i) / 60;
        input_avg(:,i) = avg * 60; % Input detection rate per second
        % Estimate the number of detections needed
        num_cells = round(scan_length_minutes*avg*60);
        
        % Create array of times between detections, generated by an
        % exponential random number generator.
        interarrivals = exprnd(1/avg, num_cells, 1);
        
        % Convert the time between detections into detections in the
        % simulated scan
        detection_times = interarrivals;
        for k = 2:length(detection_times)
            detection_times(k) = sum(interarrivals(1:k));
        end
        
        % Make sure the simulated scan is scan_length_minutes minutes long
        % Add detection times if under the desired length of time
        while detection_times(end) < scan_length_minutes*60
            new_detection = exprnd(1/avg, 1);
            interarrivals(end+1) = new_detection;
            detection_times(end+1) = new_detection + detection_times(end);
        end
        % Once the detections have exceeded that time, remove the
        % detections that occur beyond that time point
        if detection_times(end) > scan_length_minutes*60
            detection_times = detection_times(detection_times < scan_length_minutes*60);
            interarrivals = interarrivals(1:length(detection_times));
        end
        fprintf('\t%d detections\n', length(interarrivals));
        
        % Store the simulation data
        detections(1:length(detection_times), i) = detection_times;
        num_detections(i) = length(detection_times);
    end
    
    % Calculate the variance of the # of detections per interval of all
    % sizes specified (interval_lengths)
    for j = 1:length(interval_lengths)
        interval_length = interval_lengths(j);
        detections_per_interval = Count_CTCs_per_interval(detections(1:num_detections(i), i), interval_length, scan_length_minutes*60, fs);
        avg_CTCs_per_interv(j,i) = (num_detections(i) / scan_length_minutes) * interval_length/60;
        interval_variance(j,i) = var(detections_per_interval);
    end
    
end

%% Save data
if save_data_flag == 1
    if recreate_flag == 1
        save('Simulations_Poisson_detections', 'detections', 'num_detections', 'input_avgs');
    end
    save('Simulations_Poisson_data', 'avg_CTCs_per_interv', 'interval_variance');
end
